source: 
https://didcomm.org/book/v2/
https://bitbucket.org/connect2id/nimbus-jose-jwt/src/master/
https://frontegg.com/guides/oidc-authentication
https://www.w3.org/TR/vc-data-model/#dfn-issuers
https://openid.net/specs/openid-connect-self-issued-v2-1_0-ID1.html
https://www.youtube.com/watch?v=aM0d9HOGsPk

DIDCommunications vs. OIDC

Vorschläge zu technischen Themen (entnommen aus der DIDCommunications Doku):
- Nimbus Jose JWT
  - Begriffe
    - JOSE = Javascript Object Signing and Encryption
    - JWT = JSON Web Token
  - Einsatz
    - Signieren & entschlüsseln von token
    - stateless session (Request wird danach wieder vergessen; es wird sich nichts von den Anfragen gemerkt) 
- Uniform DID Method
- streamlined connection handshaking
- DID rotation (DIDComm messaging) 
  - kommt beim wechsel einer DID-Methode zum Einsatz
  - DID sendet beliebigen Nachrichtentyp an Empfänger, welcher so über die anstehende Rotation informiert wird
  - Nachricht muss: verschlüsselt sein, neue DID enthalten & nachfolgendes Attribut im header haben
    - from_prior: REQUIRED. A JWT, with sub: new DID and iss: prior DID, with a signature from a key authorized by prior DID. Standard JWT Practices for creating and signing the JWT MUST be followed.
  - Gefahren 
    - Verlust eintreffender Nachrichten, wenn Nachrichtenfrequenz sehr hoch ist
    - synchronisieren mit anderen "Agents" welche die selbe DID vertreten, muss gewährleistet werden 
      - ist der Fall wenn ein Agent zB auf 2 verschiedenen Handys vertreten ist, aber das selbe Wallet darstellt. 
    
- forward protocol to route messages
- encrypted DID message
- Threads
- DID-protocols
- authcrypt vs. anoncrypt

DIDComm ist ein Nachrichtenformat, orientiert an dem Konzept für Emails, bei dem zwischen 2 Entitäten eine Verbindung besteht, welche 2 Kanäle beinhaltet. Kanal A, für Nachrichten von Alice zu Bob. Kanal B,
für Nachrichten von Bob zu Alice. Die Nachrichten können dabei aufeinander aufbauend, als Antworten, oder unabhängig voneinander versendet werden. 
Man unterscheidet zwischen 3 Nachrichtenformaten: Plaintext, optinal JWS envelope, JWE envelope
DIDComm Plaintext message: 
Nachricht welche ohne jegliche Verschlüsselung übermittelt wird.
DIDComm signed message: 
Handelt sich dabei um eine signierte JWM(JSON web message). Dies ist ein gängiges Format um Nachrichten über verschiedenste Protokolle zu übertragen, welche per JWE(JSON web encryption) gesichert wird.
DIDComm encrypted message: 
Verschlüsselte JWM. 

DIDComm Message Plaintext Beispiel
{
  "id": "1234567890",
  "type": "<message-type-uri>",
  "from": "did:example:alice",
  "to": ["did:example:bob"],
  "created_time": 1516269022,
  "expires_time": 1516385931,
  "body": {
    "message_type_specific_attribute": "and its value",
    "another_attribute": "and its value"
  }
} -> data stored in JSON body

Was muss gegeben sein um 2 Agents miteinander sprechen zu lassen? 
- serviceEndpoint -> deklariert wie andere Entität sie erreichen kann; besteht aus Set von DIDComm Service Endpoint URI's (wie will der owner seine Nachrichten empfangen), zB 
{
    "id": "did:example:123456789abcdefghi#didcomm-1",
    "type": "DIDCommMessaging",
    "serviceEndpoint": [{
        "uri": "https://example.com/path",
        "accept": [
            "didcomm/v2", -> welche Typen werden von Aussteller akzeptiert?
            "didcomm/aip2;env=rfc587"
        ],
        "routingKeys": ["did:example:somemediator#somekey"]
    }]
}
- Sicherheit -> DIDComm Message wird immer mit Schlüsseln der empfangenden DID verschlüsselt; gleiche Nachricht an mehrere Sender muss mehrfach verschlüsselt werden (authcrypt / anoncrypt)

DIDComm Rollen:
sender - 
mediator - 
empfänger - 

Nachrichtenaustausch von Alice & Bob
Alice -> auflösen des DID Documents von Bob 
      -> erhalt von Bob's public key & Adresse auf welche Art & Weise Bob Nachrichten empfangen kann
      -> verschlüsseln Plaintext durch Alice mit public key Bob & eigenem private key
(DIDComm Routing)
Bob   -> empfangen der Nachricht & entschlüsseln + Alice als Sender authentifizieren (Alice's DID Document abrufen)
      -> (vorbereiten einer Antwort + versendet)

MessageURI -> id, thid, pthid kombinieren um DIDMessage eindeutig erkennbar zu machen (unique)
id = Nachrichten ID
thid = Thread ID
pthid = Parent_Thread ID 

Transportvoraussetzungen: 
    format of serviceEndpoint uri: Which URI schemes are used (if URI), or the properties of the object (if object).
    how to actually send messages: e.g., through HTTPS POST, through dial protocol (libp2p), etc.
    how IANA media types of the content are provided, e.g., through Content-Type header, etc.
    where additional context definition is hosted, e.g., in case the serviceEndpoint object has extra properties specific to the transport.

Routing Protocol 2.0 vereinfacht dass senden von Nachrichten
-> Partie muss immer nur den nächsten hop & Ziel kennen, gesamter Pfad den Nachricht gegangen ist kennt keiner 





OIDC: 
  Was ist OpenID Connect?
    - claim spaced authenticated -> claim = Behauptung; jeder request enthält "claims" -> Rolle, Daten, Kontaktdaten, ...
    - in Dokumentenform; muss verifiziert werden von Identity Provider
    - Echtheit der Dokumente wird durch digitale Signatur sichergestellt -> private/public key 
    - requests müssen immer per redirect an oidc gesenden werden -> nicht in einer mobile app; nur für Browseranwendungen 

    Stichpunkte: 
      - basierend auf oAuth2 Protokoll
      - erhält standard Profilinformationen der User per REST-API
      - oidc gibt Informationen über Wann, Wo, Wer der authentifizierung 
      - Participants, ID-Token, Endpoints, Scopes, Claims

    Participants: 
      - wessen Identität wird abgefragt? 
    
    ID Token: 
      - Subject - username
      - Issuing authority - wer hat den Token ausgestellt
      - audience - wer kann das Token nutzen
      - issue date - wann erstellt
      - expiration date - wann läuft es ab 
      additional: name, email 
      -> send with jwt, signature by jws, head = payload 
      claim = individual piece of information
      scope = spezifsche "Informationssets" -> standards zu bestimmten Informationen 

    Endpoints: 
      - authorization endpoint
        - OIDC fragt ob Anwendung wirklich Nutzerdaten abfragen darf / ob authentifizierung des Users wirklich stattgegeben wird + Email/Adresse falls benötigt
      - token endpoint
        - authentifizieren des Clients (der Anwendung)
      - userInfo endpoint
        - private / sensitive Informationen, können nur mit einem Token abgefragt werden

"Flows"
  - authorization code flow
    - Anmelden per Google -> weiterleitung auf Google Login Seite -> nach erfolgreichem Login redirect zur Website; Website fragt nun bei googles API an & sendet einen Code mit um zu verifizieren, dass es sich um einen echten request handelt & Daten wirklich abgefragt werden dürfen 
    - google returns access token 
    - mit access token können Daten von Googles /userinfo endpoint abgefragt werden 
  - implicit flow
    - Client Anfrage an authentifizierungsendpoint -> aber response kein code sondern token 
    - Server sendet accesstoken zurück; in Form von Fragment in URL -> "http://redirect#access_token=tokenabc" 
    - request is done afterwards, cause fragment stays in browser -> so token is stored and used to authenticated 
  - hybrid flow


